AWSTemplateFormatVersion: 2010-09-09
Description: Create Route53+ACM+CloudFront+S3+WAF.
Parameters:
  DomainName:
    Type: String
    Default: "example.com"
    AllowedValues:
      - example.com
    Description: "What do you deploy of environment?"

  SubDomainName:
    Type: String
    Default: ""
    Description: "What do you set to the sub domain name?"

  DeployEnvironment:
    Type: String
    Default: TEST
    AllowedValues:
      - TEST
      - STAGING
      - PRODUCTION

  AllowAccessIP:
    Type: String
    Default: "your global ip"

  Ownership:
    Type: String
    Default: "your team"
    Description: "Where is belonging of team?"

  AWSAccountID:
    Type: String
    Default: "0123456789"

  DeployRegion:
    Type: String
    Default: "ap-northeast-1"

  ACMID:
    Type: String
    Default: "xxx-xxx-xxx"

  WebACLID:
    Type: String
    Default: "xxx-xxx-xxx"

  IndexDocument:
    Type: String
    Default: "index.html"

  ErrorDocument:
    Type: String
    Default: "error.html"

  PriceClass:
    Description: "Distribution price class. Default is US-only, PriceClass_All is worldwide but more expensive."
    Default: PriceClass_100
    AllowedValues:
      - PriceClass_100
      - PriceClass_200
      - PriceClass_All
    Type: String

Mappings:
  RegionMap:
    ap-northeast-1:
      S3hostedzoneID: "Z2M4EHUR26P7ZW"
      websiteendpoint: "s3-website-ap-northeast-1.amazonaws.com"
    ap-northeast-2:
      S3hostedzoneID: "Z3W03O7B5YMIYP"
      websiteendpoint: "s3-website.ap-northeast-2.amazonaws.com"
    ap-south-1:
      S3hostedzoneID: "Z11RGJOFQNVJUP"
      websiteendpoint: "s3-website.ap-south-1.amazonaws.com"
    ap-southeast-1:
      S3hostedzoneID: "Z3O0J2DXBE1FTB"
      websiteendpoint: "s3-website-ap-southeast-1.amazonaws.com"
    ap-southeast-2:
      S3hostedzoneID: "Z1WCIGYICN2BYD"
      websiteendpoint: "s3-website-ap-southeast-2.amazonaws.com"
    eu-central-1:
      S3hostedzoneID: "Z21DNDUVLTQW6Q"
      websiteendpoint: "s3-website.eu-central-1.amazonaws.com"
    eu-west-1:
      S3hostedzoneID: "Z1BKCTXD74EZPE"
      websiteendpoint: "s3-website-eu-west-1.amazonaws.com"
    sa-east-1:
      S3hostedzoneID: "Z7KQH4QJS55SO"
      websiteendpoint: "s3-website-sa-east-1.amazonaws.com"
    us-east-1:
      S3hostedzoneID: "Z3AQBSTGFYJSTF"
      websiteendpoint: "s3-website-us-east-1.amazonaws.com"
    us-east-2:
      S3hostedzoneID: "Z2O1EMRO9K5GLX"
      websiteendpoint: "s3-website.us-east-2.amazonaws.com"
    us-west-1:
      S3hostedzoneID: "Z2F56UZL2M1ACD"
      websiteendpoint: "s3-website-us-west-1.amazonaws.com"
    us-west-2:
      S3hostedzoneID: "Z3BJ6K6RIION7M"
      websiteendpoint: "s3-website-us-west-2.amazonaws.com"

Conditions:
  IsEnvProd: !Equals [ !Ref DeployEnvironment, "PRODUCTION" ]
  IsEnvTest: !Equals [ !Ref "DeployEnvironment", "TEST" ]

Resources:
  CloudFrontOriginAccessIdentityFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-CloudFrontOriginAccessIdentityFunction"
      Code:
        ZipFile: >
          exports.handler = (ev,cx) => {
            const response = {
              SUCCESS : 'SUCCESS',
              FAILED : 'FAILED',
              send : (event, context, responseStatus, responseData, physicalResourceId) => {
                const responseBody = JSON.stringify({
                    Status: responseStatus,
                    Reason: 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                    PhysicalResourceId: physicalResourceId || context.logStreamName,
                    StackId: event.StackId,
                    RequestId: event.RequestId,
                    LogicalResourceId: event.LogicalResourceId,
                    Data: responseData
                });
                const https = require('https');
                const url = require('url');
                const parsedUrl = url.parse(event.ResponseURL);
                const options = {
                    hostname: parsedUrl.hostname,
                    port: 443,
                    path: parsedUrl.path,
                    method: 'PUT',
                    headers: {
                        'content-type': '',
                        'content-length': responseBody.length
                    }
                };
                const request = https.request(options, (response) => {
                    context.done();
                });
                request.on('error', (error) => {
                    context.done();
                });
                request.write(responseBody);
                request.end();
              }
            };
            const AWS=require('aws-sdk');
            const evType=ev.RequestType,prop=ev.ResourceProperties,physicalId=ev.PhysicalResourceId;
            delete prop.ServiceToken;
            const fail=(er) => {console.log(er);response.send(ev,cx,'FAILED',{Error:er});};
            const succeed=(data,id) => {response.send(ev,cx,'SUCCESS',data,id);};
            const ignorable = (cd) => ((400<=cd)&&(cd<500));
            const cloudfront=new AWS.CloudFront();
            const getOAI = (id,callback) => {
              cloudfront.getCloudFrontOriginAccessIdentity({Id:id},callback);
            };
            const onCreate = () => {
              cloudfront.createCloudFrontOriginAccessIdentity(prop,(er,result) => {
                if(er){fail(er);return;}
                succeed({Id:result.CloudFrontOriginAccessIdentity.Id},result.CloudFrontOriginAccessIdentity.Id);
              });
            };
            const onUpdate= () => {
              getOAI(physicalId,(er,oaiData) => {
                if(er){fail(er);return;}
                const param={
                  CloudFrontOriginAccessIdentityConfig:{
                    CallerReference:oaiData.CloudFrontOriginAccessIdentityConfig.CallerReference,
                    Comment:prop.CloudFrontOriginAccessIdentityConfig.Comment
                  },
                  Id:physicalId,
                  IfMatch:oaiData.ETag
                };
                cloudfront.updateCloudFrontOriginAccessIdentity(param,(er,result) => {
                  if(er){fail(er);return;}
                  succeed({Id:physicalId},physicalId);
                });
              });
            };
            const onDelete=() => {
              getOAI(physicalId,(er,oaiData) => {
                if(er && ignorable(er.statusCode)){succeed({},physicalId);return;}
                if(er){fail(er);return;}
                const param={
                  Id:physicalId,
                  IfMatch:oaiData.ETag
                };
                cloudfront.deleteCloudFrontOriginAccessIdentity(param,(er,result) => {
                  if(er && !ignorable(er.statusCode)){fail(er);return;}
                  succeed({},physicalId);
                });
              });
            };
            switch(evType){
              case 'Create':onCreate();break;
              case 'Update':onUpdate();break;
              case 'Delete':onDelete();break;
            }
          }

      Handler: "index.handler"
      MemorySize: 128
      Runtime: "nodejs4.3"
      Timeout: 60
      Role: !GetAtt CustomResourceFunctionRole.Arn
  # CustomResource用のLambdaFunctionのRole
  CustomResourceFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: !Sub "/${AWS::StackName}/LambdaFunctionRole/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Principal:
              Service: "lambda.amazonaws.com"
            Effect: Allow
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: cloudfrontoai
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "cloudfront:GetCloudFrontOriginAccessIdentity"
                  - "cloudfront:CreateCloudFrontOriginAccessIdentity"
                  - "cloudfront:UpdateCloudFrontOriginAccessIdentity"
                  - "cloudfront:DeleteCloudFrontOriginAccessIdentity"
                Effect: Allow
                Resource: "*"

  S3LogsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [ "logs.", !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
      Tags:
        - Key: Project
          Value: !Ref "DomainName"
        - Key: Ownership
          Value: !Ref "Ownership"
      AccessControl: LogDeliveryWrite
    DeletionPolicy: Retain

  S3SiteBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join [ "", [ !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
      Tags:
        - Key: Project
          Value: !Ref "DomainName"
        - Key: Ownership
          Value: !Ref "Ownership"
      WebsiteConfiguration:
        ErrorDocument: !Ref "ErrorDocument"
        IndexDocument: !Ref "IndexDocument"
        #RedirectAllRequestsTo:
        #RoutingRules:
      LoggingConfiguration:
        DestinationBucketName: !Ref S3LogsBucket
        LogFilePrefix: !Join [ "", [ "logs/s3/", !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
    DeletionPolicy: Retain

  # S3 OriginのBucketPolicy（CustomResourceで作成したOAIを参照している
  S3SiteBucketPolicy:
    DependsOn: CloudFrontOriginAccessIdentity
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: S3SiteBucket
      PolicyDocument:
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Sub ["arn:aws:s3:::${S3SiteBucket}/*", { S3SiteBucket: !Ref S3SiteBucket }]
            Principal:
              AWS: !Sub ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${oai}", { oai: !GetAtt CloudFrontOriginAccessIdentity.Id}]

  CloudFrontOriginAccessIdentity:
    Type: "Custom::CloudFrontOriginAccessIdentity"
    Properties:
      ServiceToken: !Sub ["arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${func}", { func: !Ref CloudFrontOriginAccessIdentityFunction }]
      CloudFrontOriginAccessIdentityConfig:
        CallerReference: !Ref AWS::StackName
        Comment: !Ref AWS::StackName

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: !Ref PriceClass
        DefaultRootObject: !Ref "IndexDocument"
        Origins:
          - DomainName: !GetAtt S3SiteBucket.DomainName
            Id: !Join [ "", [ "S3-", !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
            S3OriginConfig:
              OriginAccessIdentity: !Sub ["origin-access-identity/cloudfront/${oai}", { oai: !GetAtt CloudFrontOriginAccessIdentity.Id}]
        HttpVersion: http2
        WebACLId: !If [ IsEnvProd, !Ref "AWS::NoValue", !Ref "WebACLID" ]
        Logging:
          Bucket: !GetAtt S3LogsBucket.DomainName
          Prefix: !Sub "logs/cloudfront/${DomainName}/"
          IncludeCookies: false
        Aliases:
          - !Join [ "", [ !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
        DefaultCacheBehavior:
          TargetOriginId: !Join [ "", [ "S3-", !Ref "SubDomainName", ".", !Ref "DomainName" ] ]
          ForwardedValues:
            QueryString: true
          MaxTTL: !If [ IsEnvTest, 0, !Ref "AWS::NoValue" ]
          DefaultTTL: !If [ IsEnvTest, 0, !Ref "AWS::NoValue" ]
          ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: "/"
            ResponseCode: '200'
            ErrorCachingMinTTL: '30'
        ViewerCertificate:
          AcmCertificateArn: !Join [ "", [ "arn:aws:acm:", !Ref "DeployRegion", ":certificate", !Ref "AWSAccountID", ":certificate/", !Ref "ACMID" ] ]
          SslSupportMethod: sni-only

  Route53RecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: Z23CWO3UADC3ES # If it is not the Tokyo region, refer to Mapping.
      RecordSets:
        - Name: !Join [ "", [ !Ref "SubDomainName", ".", !Ref "DomainName", "." ] ]
          Type: A
          # Resolve to Redirect CloudFront distribution
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt CloudFront.DomainName

Outputs:
  CheckURL:
    Value: !Join [ "", [ "https://", !Ref "SubDomainName", ".", !Ref "DomainName"  ] ]
